---
// Copyright (c) Pascal Brand
// MIT License
//
// Add a tile layer on the map
// Must be used in the <slot> part of <Leaflet>
//
// Example
//    <Leaflet options={options}>
//      <TyleLayer
//        urlTemplate'http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',
//        options={{
//            opacity: 0.5,
//            maxZoom: 20,
//            subdomains:['mt0','mt1','mt2','mt3']
//          }}
//        />
//      <Polyline latlngs={data as LatLngTuple[]} options={{color: 'red'}} />
//    </Leaflet>

import type { TileLayerOptions } from 'leaflet'
import type { AstroLeafletTileLayerType } from '../index'
import type { LayerNamesType } from '../layerFromName'
import { getLayerOptionsFromName, mergeTileLayerOptions, } from '../layerFromName'

type Props = AstroLeafletTileLayerType

interface _AstroLeafletTileLayerAllOptionsType {
  // we must have urlTemplate, and optionaly tileByName
  // if tileByName is provided, urlTemple will be guessed
  urlTemplate: string,
  tileByName?: LayerNamesType,
  options?: TileLayerOptions,
}

const enrichedProps: _AstroLeafletTileLayerAllOptionsType = Astro.props as _AstroLeafletTileLayerAllOptionsType
if (enrichedProps.tileByName) {
  const layerFromName = getLayerOptionsFromName(enrichedProps.tileByName)
  enrichedProps.urlTemplate = layerFromName.tileLayer
  enrichedProps.options = mergeTileLayerOptions(enrichedProps.options, layerFromName.options)
}

---

<!-- dummy component to call the constructor of the custom element astro-leaflet-tilelayer,
     which is defined in Leaflet.astro -->
<astro-leaflet-tilelayer data-props={JSON.stringify(enrichedProps)} >
  <slot />
</astro-leaflet-tilelayer>
