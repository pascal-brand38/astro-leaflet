---
// Copyright (c) Pascal Brand
// MIT License
//
// Create a leaflet map
//
// Example:
//    <Leaflet options={
//      {
//        tileLayer: 'https://{s}.google.com/vt/lyrs=y&hl=en&x={x}&y={y}&z={z}',
//        tileLayerOptions: {
//          subdomains: [ 'mt0', 'mt1', 'mt2', 'mt3' ],
//          attribution: 'Map data &copy; Google',
//    	}
//    }}/>

import Marker from './Marker.astro'
import type { AstroLeafletType,  } from '../index'
import { getLayerOptionsFromName, mergeTileLayerOptions } from '../layerFromName'
import "leaflet/dist/leaflet.css"

// set default properties
function setDefaultProps(props: AstroLeafletType) {
  props.options = props.options || {}
  props.options.tileLayerOptions = props.options.tileLayerOptions || {}
  props.options.center = props.options.center || [ 30, 7 ]
  props.options.zoom = props.options.zoom || 2
  if (!props.options.tileLayer) {
    props.options.tileLayer = props.options.tileLayer || "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
    props.options.tileLayerOptions.subdomains = [ 'a', 'b', 'c' ]
    props.options.tileLayerOptions.attribution = props.options.tileLayerOptions.attribution || "&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors"
  }

  props.options.markers = props.options.markers || []
}

type Props = AstroLeafletType

const enrichedProps: AstroLeafletType = Astro.props
enrichedProps.options = enrichedProps.options || {}
if (enrichedProps.options.tileByName) {
  const layerFromName = getLayerOptionsFromName(enrichedProps.options.tileByName)
  enrichedProps.options.tileLayer = layerFromName.tileLayer
  enrichedProps.options.tileLayerOptions = mergeTileLayerOptions(enrichedProps.options.tileLayerOptions, layerFromName.options)
}

setDefaultProps(enrichedProps)

const {
  options,
  id= 'astro-leaflet-' + Math.random().toString(36).slice(2, 11),
  style: providedStyle,
  class: className,
  ...props
} = enrichedProps

// if neither style nor class is provided, set a style so that the map is displayed
const style = (!providedStyle && !className) ? 'width: 100%; height: 50vh;' : (providedStyle || '')

---

<astro-leaflet
  data-id={id}
  data-options={JSON.stringify(options)}
>
  <div id={id} style={style} class={className} {...props}>
  </div>
  {
    options.markers && options.markers.map(marker => (
      <Marker {...marker} />
    ))
  }
  <slot/>
</astro-leaflet>

<script>
  import {
    map as Lmap,
    tileLayer as LtileLayer,
  } from "leaflet/dist/leaflet-src.esm"
  // } from "leaflet"
  import type {
    AstroLeafletOptionsType,
  } from '../index'
  import type {
    Map,
  } from 'leaflet'


  class CustomElementAstroLeaflet extends HTMLElement {
    /** The map, once created. Can be accessed using    getMapFromId(id),
     * which is summarized by                           document.getElementById(id).leafletElement
     */
    leafletElement: Map | undefined

    constructor() {
      super()
      const options: AstroLeafletOptionsType = JSON.parse(this.dataset.options!)
      const id: string = this.dataset.id!
      this.leafletElement = undefined

      this.createMap(id, options)

      // create the map only when the document is loaded,
      // so that markers are created.
      // this is in case CustomElementCreateLeafletIcon is defined after CustomElementAstroLeaflet
      // cf. https://stackoverflow.com/questions/35805252/how-to-execute-a-script-when-the-custom-element-is-upgraded
      // document.addEventListener("readystatechange", (event) => {
      //   if (document.readyState !== 'complete') {
      //     return
      //   }
      //   this.createMap(id, options)
      // })
    }

    createMap(id: string, options:AstroLeafletOptionsType) {
      let map = Lmap(id, options.mapOptions)

      map.setView(options.center!, options.zoom, options.setViewOptions)
      LtileLayer(options.tileLayer!, options.tileLayerOptions).addTo(map)

      // save the map
      console.info('astro-leaflet: map is created')
      this.leafletElement = map
    }
  }
  customElements.get('astro-leaflet') || customElements.define("astro-leaflet", CustomElementAstroLeaflet);

  import { CustomElementLayerGroup } from './customElements/layergroup'
  customElements.get('astro-leaflet-layergroup') || customElements.define("astro-leaflet-layergroup", CustomElementLayerGroup);
  import { CustomElementTileLayer } from './customElements/tilelayer'
  customElements.get('astro-leaflet-tilelayer') || customElements.define("astro-leaflet-tilelayer", CustomElementTileLayer);

  import { CustomElementControlLayer, CustomElementBaseLayer, CustomElementOverlay } from './customElements/controllayer'
  customElements.get('astro-leaflet-controllayer') || customElements.define("astro-leaflet-controllayer", CustomElementControlLayer);
  customElements.get('astro-leaflet-baselayer') || customElements.define("astro-leaflet-baselayer", CustomElementBaseLayer);
  customElements.get('astro-leaflet-overlay') || customElements.define("astro-leaflet-overlay", CustomElementOverlay);

  import { CustomElementPolyline } from './customElements/polyline'
  customElements.get('astro-leaflet-polyline') || customElements.define("astro-leaflet-polyline", CustomElementPolyline);

  import { CustomElementCreateLeafletIcon, CustomElementMarker } from './customElements/marker'
  customElements.get('create-leaflet-divicon') || customElements.define("create-leaflet-divicon", CustomElementCreateLeafletIcon);
  customElements.get('astro-leaflet-marker') || customElements.define("astro-leaflet-marker", CustomElementMarker);

  import { CustomElementImageOverlay } from './customElements/imageoverlay'
  customElements.get('astro-leaflet-imageoverlay') || customElements.define("astro-leaflet-imageoverlay", CustomElementImageOverlay);

  // ***                               MANDATORY                           ***
  // *** fitbounds must be declared AFTER the leaflet components           ***
  // *** this ensures the components are created before getting fitbounds  ***
  import { CustomElementFitBounds } from './customElements/fitbounds'
  customElements.get('astro-leaflet-fitbounds') || customElements.define("astro-leaflet-fitbounds", CustomElementFitBounds);

</script>
